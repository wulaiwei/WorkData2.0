//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(WorkData.EF.Domain.DbEntity),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets5430c098bf31157c7524d2e2322c1d100d606cf4988b17401c49d2f2771b14c1))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets5430c098bf31157c7524d2e2322c1d100d606cf4988b17401c49d2f2771b14c1 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "5430c098bf31157c7524d2e2322c1d100d606cf4988b17401c49d2f2771b14c1"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Role")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Resource")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Operation")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.ResourceOperation")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.RoleResource")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.UserRole")
            {
                return GetView6();
            }

            if (extentName == "DbEntity.Role")
            {
                return GetView7();
            }

            if (extentName == "DbEntity.Resources")
            {
                return GetView8();
            }

            if (extentName == "DbEntity.Operations")
            {
                return GetView9();
            }

            if (extentName == "DbEntity.User")
            {
                return GetView10();
            }

            if (extentName == "DbEntity.Resource_Operations")
            {
                return GetView11();
            }

            if (extentName == "DbEntity.Role_Resources")
            {
                return GetView12();
            }

            if (extentName == "DbEntity.User_Roles")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.Category")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.Content")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.ContentDescriptionField")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.ContentDoubleField")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.ContentIntField")
            {
                return GetView18();
            }

            if (extentName == "CodeFirstDatabase.ContentStringField")
            {
                return GetView19();
            }

            if (extentName == "CodeFirstDatabase.ContentTextField")
            {
                return GetView20();
            }

            if (extentName == "CodeFirstDatabase.ContentTimeField")
            {
                return GetView21();
            }

            if (extentName == "CodeFirstDatabase.Model")
            {
                return GetView22();
            }

            if (extentName == "CodeFirstDatabase.ModelField")
            {
                return GetView23();
            }

            if (extentName == "CodeFirstDatabase.ModelModelField")
            {
                return GetView24();
            }

            if (extentName == "DbEntity.Categories")
            {
                return GetView25();
            }

            if (extentName == "DbEntity.Contents")
            {
                return GetView26();
            }

            if (extentName == "DbEntity.ContentDescriptionFields")
            {
                return GetView27();
            }

            if (extentName == "DbEntity.ContentDoubleFields")
            {
                return GetView28();
            }

            if (extentName == "DbEntity.ContentIntFields")
            {
                return GetView29();
            }

            if (extentName == "DbEntity.ContentStringFields")
            {
                return GetView30();
            }

            if (extentName == "DbEntity.ContentTextFields")
            {
                return GetView31();
            }

            if (extentName == "DbEntity.ContentTimeFields")
            {
                return GetView32();
            }

            if (extentName == "DbEntity.Models")
            {
                return GetView33();
            }

            if (extentName == "DbEntity.ModelFields")
            {
                return GetView34();
            }

            if (extentName == "DbEntity.Model_ModelFields")
            {
                return GetView35();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Role.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role
        [CodeFirstDatabaseSchema.Role](T1.[Role.ROLE_ID], T1.Role_NAME, T1.Role_CODE, T1.Role_STATUS)
    FROM (
        SELECT 
            T.RoleId AS [Role.ROLE_ID], 
            T.Name AS Role_NAME, 
            T.Code AS Role_CODE, 
            T.Status AS Role_STATUS, 
            True AS _from0
        FROM DbEntity.Role AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Resource.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Resource
        [CodeFirstDatabaseSchema.Resource](T1.[Resource.RESOURCE_ID], T1.[Resource.PARENT_ID], T1.[Resource.RESOURCE_NAME], T1.Resource_CODE, T1.[Resource.RESOURCE_URL], T1.Resource_LAYER, T1.[Resource.IS_LOCK], T1.[Resource.RESOURCE_IMG], T1.Resource_SORT, T1.[Resource.HAS_LEVEL], T1.[Resource.CONTROLLER_NAME])
    FROM (
        SELECT 
            T.ResourceId AS [Resource.RESOURCE_ID], 
            T.ParentId AS [Resource.PARENT_ID], 
            T.ResourceName AS [Resource.RESOURCE_NAME], 
            T.Code AS Resource_CODE, 
            T.ResourceUrl AS [Resource.RESOURCE_URL], 
            T.Layer AS Resource_LAYER, 
            T.IsLock AS [Resource.IS_LOCK], 
            T.ResourceImg AS [Resource.RESOURCE_IMG], 
            T.Sort AS Resource_SORT, 
            T.HasLevel AS [Resource.HAS_LEVEL], 
            T.ControllerName AS [Resource.CONTROLLER_NAME], 
            True AS _from0
        FROM DbEntity.Resources AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Operation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Operation
        [CodeFirstDatabaseSchema.Operation](T1.[Operation.OPERATION_ID], T1.Operation_NAME, T1.Operation_CODE, T1.Operation_STATUS, T1.Operation_CLASS, T1.Operation_ID, T1.[Operation.ON_CLICK], T1.Operation_STYLE, T1.[Operation.OPERATION_CATEGORY])
    FROM (
        SELECT 
            T.OperationId AS [Operation.OPERATION_ID], 
            T.Name AS Operation_NAME, 
            T.Code AS Operation_CODE, 
            T.Status AS Operation_STATUS, 
            T.Class AS Operation_CLASS, 
            T.Id AS Operation_ID, 
            T.OnClick AS [Operation.ON_CLICK], 
            T.Style AS Operation_STYLE, 
            T.OperationCategory AS [Operation.OPERATION_CATEGORY], 
            True AS _from0
        FROM DbEntity.Operations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T1.[User.USER_ID], T1.[User.LOGIN_NAME], T1.User_PASSWORD, T1.[User.IS_LOCK], T1.User_SALT, T1.User_NAME, T1.[User.CELL_PHONE], T1.User_EMAIL, T1.User_ADDRESS, T1.User_Qq, T1.[User.WEICHAT_NUMBER], T1.[User.ADD_TIME])
    FROM (
        SELECT 
            T.UserId AS [User.USER_ID], 
            T.LoginName AS [User.LOGIN_NAME], 
            T.Password AS User_PASSWORD, 
            T.IsLock AS [User.IS_LOCK], 
            T.Salt AS User_SALT, 
            T.Name AS User_NAME, 
            T.CellPhone AS [User.CELL_PHONE], 
            T.Email AS User_EMAIL, 
            T.Address AS User_ADDRESS, 
            T.Qq AS User_Qq, 
            T.WeiChatNumber AS [User.WEICHAT_NUMBER], 
            T.AddTime AS [User.ADD_TIME], 
            True AS _from0
        FROM DbEntity.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ResourceOperation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ResourceOperation
        [CodeFirstDatabaseSchema.ResourceOperation](T1.[ResourceOperation.RESOURCE_ID], T1.[ResourceOperation.OPERATION_ID])
    FROM (
        SELECT 
            Key(T.Resource_Operations_Source).ResourceId AS [ResourceOperation.RESOURCE_ID], 
            Key(T.Resource_Operations_Target).OperationId AS [ResourceOperation.OPERATION_ID], 
            True AS _from0
        FROM DbEntity.Resource_Operations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RoleResource.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RoleResource
        [CodeFirstDatabaseSchema.RoleResource](T1.[RoleResource.ROLE_ID], T1.[RoleResource.RESOURCE_ID])
    FROM (
        SELECT 
            Key(T.Role_Resources_Source).RoleId AS [RoleResource.ROLE_ID], 
            Key(T.Role_Resources_Target).ResourceId AS [RoleResource.RESOURCE_ID], 
            True AS _from0
        FROM DbEntity.Role_Resources AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.UserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRole
        [CodeFirstDatabaseSchema.UserRole](T1.[UserRole.USER_ID], T1.[UserRole.ROLE_ID])
    FROM (
        SELECT 
            Key(T.User_Roles_Source).UserId AS [UserRole.USER_ID], 
            Key(T.User_Roles_Target).RoleId AS [UserRole.ROLE_ID], 
            True AS _from0
        FROM DbEntity.User_Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Role.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role
        [WorkData.EF.Domain.Role](T1.Role_RoleId, T1.Role_Name, T1.Role_Code, T1.Role_Status)
    FROM (
        SELECT 
            T.ROLE_ID AS Role_RoleId, 
            T.NAME AS Role_Name, 
            T.CODE AS Role_Code, 
            T.STATUS AS Role_Status, 
            True AS _from0
        FROM CodeFirstDatabase.Role AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Resources.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Resources
        [WorkData.EF.Domain.Resource](T1.Resource_ResourceId, T1.Resource_ParentId, T1.Resource_ResourceName, T1.Resource_Code, T1.Resource_ResourceUrl, T1.Resource_Layer, T1.Resource_IsLock, T1.Resource_ResourceImg, T1.Resource_Sort, T1.Resource_HasLevel, T1.Resource_ControllerName)
    FROM (
        SELECT 
            T.RESOURCE_ID AS Resource_ResourceId, 
            T.PARENT_ID AS Resource_ParentId, 
            T.RESOURCE_NAME AS Resource_ResourceName, 
            T.CODE AS Resource_Code, 
            T.RESOURCE_URL AS Resource_ResourceUrl, 
            T.LAYER AS Resource_Layer, 
            T.IS_LOCK AS Resource_IsLock, 
            T.RESOURCE_IMG AS Resource_ResourceImg, 
            T.SORT AS Resource_Sort, 
            T.HAS_LEVEL AS Resource_HasLevel, 
            T.CONTROLLER_NAME AS Resource_ControllerName, 
            True AS _from0
        FROM CodeFirstDatabase.Resource AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Operations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Operations
        [WorkData.EF.Domain.Operation](T1.Operation_OperationId, T1.Operation_Name, T1.Operation_Code, T1.Operation_Status, T1.Operation_Class, T1.Operation_Id, T1.Operation_OnClick, T1.Operation_Style, T1.Operation_OperationCategory)
    FROM (
        SELECT 
            T.OPERATION_ID AS Operation_OperationId, 
            T.NAME AS Operation_Name, 
            T.CODE AS Operation_Code, 
            T.STATUS AS Operation_Status, 
            T.CLASS AS Operation_Class, 
            T.ID AS Operation_Id, 
            T.ON_CLICK AS Operation_OnClick, 
            T.STYLE AS Operation_Style, 
            T.OPERATION_CATEGORY AS Operation_OperationCategory, 
            True AS _from0
        FROM CodeFirstDatabase.Operation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [WorkData.EF.Domain.User](T1.User_UserId, T1.User_LoginName, T1.User_Password, T1.User_IsLock, T1.User_Salt, T1.User_Name, T1.User_CellPhone, T1.User_Email, T1.User_Address, T1.User_Qq, T1.User_WeiChatNumber, T1.User_AddTime)
    FROM (
        SELECT 
            T.USER_ID AS User_UserId, 
            T.LOGIN_NAME AS User_LoginName, 
            T.PASSWORD AS User_Password, 
            T.IS_LOCK AS User_IsLock, 
            T.SALT AS User_Salt, 
            T.NAME AS User_Name, 
            T.CELL_PHONE AS User_CellPhone, 
            T.EMAIL AS User_Email, 
            T.ADDRESS AS User_Address, 
            T.Qq AS User_Qq, 
            T.WEICHAT_NUMBER AS User_WeiChatNumber, 
            T.ADD_TIME AS User_AddTime, 
            True AS _from0
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Resource_Operations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Resource_Operations
        [WorkData.EF.Domain.Resource_Operations](T3.[Resource_Operations.Resource_Operations_Source], T3.[Resource_Operations.Resource_Operations_Target])
    FROM (
        SELECT -- Constructing Resource_Operations_Source
            CreateRef(DbEntity.Resources, row(T2.[Resource_Operations.Resource_Operations_Source.ResourceId]), [WorkData.EF.Domain.Resource]) AS [Resource_Operations.Resource_Operations_Source], 
            T2.[Resource_Operations.Resource_Operations_Target]
        FROM (
            SELECT -- Constructing Resource_Operations_Target
                T1.[Resource_Operations.Resource_Operations_Source.ResourceId], 
                CreateRef(DbEntity.Operations, row(T1.[Resource_Operations.Resource_Operations_Target.OperationId]), [WorkData.EF.Domain.Operation]) AS [Resource_Operations.Resource_Operations_Target]
            FROM (
                SELECT 
                    T.RESOURCE_ID AS [Resource_Operations.Resource_Operations_Source.ResourceId], 
                    T.OPERATION_ID AS [Resource_Operations.Resource_Operations_Target.OperationId], 
                    True AS _from0
                FROM CodeFirstDatabase.ResourceOperation AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DbEntity.Role_Resources.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role_Resources
        [WorkData.EF.Domain.Role_Resources](T3.[Role_Resources.Role_Resources_Source], T3.[Role_Resources.Role_Resources_Target])
    FROM (
        SELECT -- Constructing Role_Resources_Source
            CreateRef(DbEntity.Role, row(T2.[Role_Resources.Role_Resources_Source.RoleId]), [WorkData.EF.Domain.Role]) AS [Role_Resources.Role_Resources_Source], 
            T2.[Role_Resources.Role_Resources_Target]
        FROM (
            SELECT -- Constructing Role_Resources_Target
                T1.[Role_Resources.Role_Resources_Source.RoleId], 
                CreateRef(DbEntity.Resources, row(T1.[Role_Resources.Role_Resources_Target.ResourceId]), [WorkData.EF.Domain.Resource]) AS [Role_Resources.Role_Resources_Target]
            FROM (
                SELECT 
                    T.ROLE_ID AS [Role_Resources.Role_Resources_Source.RoleId], 
                    T.RESOURCE_ID AS [Role_Resources.Role_Resources_Target.ResourceId], 
                    True AS _from0
                FROM CodeFirstDatabase.RoleResource AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DbEntity.User_Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User_Roles
        [WorkData.EF.Domain.User_Roles](T3.[User_Roles.User_Roles_Source], T3.[User_Roles.User_Roles_Target])
    FROM (
        SELECT -- Constructing User_Roles_Source
            CreateRef(DbEntity.User, row(T2.[User_Roles.User_Roles_Source.UserId]), [WorkData.EF.Domain.User]) AS [User_Roles.User_Roles_Source], 
            T2.[User_Roles.User_Roles_Target]
        FROM (
            SELECT -- Constructing User_Roles_Target
                T1.[User_Roles.User_Roles_Source.UserId], 
                CreateRef(DbEntity.Role, row(T1.[User_Roles.User_Roles_Target.RoleId]), [WorkData.EF.Domain.Role]) AS [User_Roles.User_Roles_Target]
            FROM (
                SELECT 
                    T.USER_ID AS [User_Roles.User_Roles_Source.UserId], 
                    T.ROLE_ID AS [User_Roles.User_Roles_Target.RoleId], 
                    True AS _from0
                FROM CodeFirstDatabase.UserRole AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Category.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Category
        [CodeFirstDatabaseSchema.Category](T1.[Category.CATEGORY_ID], T1.[Category.PARENT_ID], T1.[Category.MODEL_ID], T1.Category_NAME, T1.Category_CODE, T1.Category_STATUS, T1.Category_LAYER, T1.[Category.HAS_LEVEL], T1.Category_SORT, T1.[Category.FORM_TEMPLATE], T1.[Category.FORM_JSON], T1.[Category.LIST_JSON], T1.[Category.LIST_HEAD], T1.[Category.LIST_TEMPLATE])
    FROM (
        SELECT 
            T.CategoryId AS [Category.CATEGORY_ID], 
            T.ParentId AS [Category.PARENT_ID], 
            T.ModelId AS [Category.MODEL_ID], 
            T.Name AS Category_NAME, 
            T.Code AS Category_CODE, 
            T.Status AS Category_STATUS, 
            T.Layer AS Category_LAYER, 
            T.HasLevel AS [Category.HAS_LEVEL], 
            T.Sort AS Category_SORT, 
            T.FormTemplate AS [Category.FORM_TEMPLATE], 
            T.FormJson AS [Category.FORM_JSON], 
            T.ListJson AS [Category.LIST_JSON], 
            T.ListHead AS [Category.LIST_HEAD], 
            T.ListTempalte AS [Category.LIST_TEMPLATE], 
            True AS _from0
        FROM DbEntity.Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Content.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Content
        [CodeFirstDatabaseSchema.Content](T1.[Content.CONTENT_ID], T1.[Content.MODEL_ID], T1.[Content.CATEGORY_ID])
    FROM (
        SELECT 
            T.ContentId AS [Content.CONTENT_ID], 
            T.ModelId AS [Content.MODEL_ID], 
            T.CategoryId AS [Content.CATEGORY_ID], 
            True AS _from0
        FROM DbEntity.Contents AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ContentDescriptionField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentDescriptionField
        [CodeFirstDatabaseSchema.ContentDescriptionField](T1.[ContentDescriptionField.CONTENT_DESCRIPTION_FIELD_ID], T1.[ContentDescriptionField.CONTENT_ID], T1.[ContentDescriptionField.FIELD_CODE], T1.[ContentDescriptionField.FIELD_VALUE])
    FROM (
        SELECT 
            T.ContentDescriptionFieldId AS [ContentDescriptionField.CONTENT_DESCRIPTION_FIELD_ID], 
            T.ContentId AS [ContentDescriptionField.CONTENT_ID], 
            T.FieldCode AS [ContentDescriptionField.FIELD_CODE], 
            T.FieldValue AS [ContentDescriptionField.FIELD_VALUE], 
            True AS _from0
        FROM DbEntity.ContentDescriptionFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ContentDoubleField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentDoubleField
        [CodeFirstDatabaseSchema.ContentDoubleField](T1.[ContentDoubleField.CONTENT_DOUBLE_FIELD_ID], T1.[ContentDoubleField.CONTENT_ID], T1.[ContentDoubleField.FIELD_CODE], T1.[ContentDoubleField.FIELD_VALUE])
    FROM (
        SELECT 
            T.ContentDoubleFieldId AS [ContentDoubleField.CONTENT_DOUBLE_FIELD_ID], 
            T.ContentId AS [ContentDoubleField.CONTENT_ID], 
            T.FieldCode AS [ContentDoubleField.FIELD_CODE], 
            T.FieldValue AS [ContentDoubleField.FIELD_VALUE], 
            True AS _from0
        FROM DbEntity.ContentDoubleFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ContentIntField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentIntField
        [CodeFirstDatabaseSchema.ContentIntField](T1.[ContentIntField.CONTENT_INT_FIELD_ID], T1.[ContentIntField.CONTENT_ID], T1.[ContentIntField.FIELD_CODE], T1.[ContentIntField.FIELD_VALUE])
    FROM (
        SELECT 
            T.ContentIntFieldId AS [ContentIntField.CONTENT_INT_FIELD_ID], 
            T.ContentId AS [ContentIntField.CONTENT_ID], 
            T.FieldCode AS [ContentIntField.FIELD_CODE], 
            T.FieldValue AS [ContentIntField.FIELD_VALUE], 
            True AS _from0
        FROM DbEntity.ContentIntFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ContentStringField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentStringField
        [CodeFirstDatabaseSchema.ContentStringField](T1.[ContentStringField.CONTENT_STRING_FIELD_ID], T1.[ContentStringField.CONTENT_ID], T1.[ContentStringField.FIELD_CODE], T1.[ContentStringField.FIELD_VALUE])
    FROM (
        SELECT 
            T.ContentStringFieldId AS [ContentStringField.CONTENT_STRING_FIELD_ID], 
            T.ContentId AS [ContentStringField.CONTENT_ID], 
            T.FieldCode AS [ContentStringField.FIELD_CODE], 
            T.FieldValue AS [ContentStringField.FIELD_VALUE], 
            True AS _from0
        FROM DbEntity.ContentStringFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ContentTextField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentTextField
        [CodeFirstDatabaseSchema.ContentTextField](T1.[ContentTextField.CONTENT_TEXT_FIELD_ID], T1.[ContentTextField.CONTENT_ID], T1.[ContentTextField.FIELD_CODE], T1.[ContentTextField.FIELD_VALUE])
    FROM (
        SELECT 
            T.ContentTextFieldId AS [ContentTextField.CONTENT_TEXT_FIELD_ID], 
            T.ContentId AS [ContentTextField.CONTENT_ID], 
            T.FieldCode AS [ContentTextField.FIELD_CODE], 
            T.FieldValue AS [ContentTextField.FIELD_VALUE], 
            True AS _from0
        FROM DbEntity.ContentTextFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ContentTimeField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentTimeField
        [CodeFirstDatabaseSchema.ContentTimeField](T1.[ContentTimeField.CONTENT_TIME_FIELD_ID], T1.[ContentTimeField.CONTENT_ID], T1.[ContentTimeField.FIELD_CODE], T1.[ContentTimeField.FIELD_VALUE])
    FROM (
        SELECT 
            T.ContentTimeFieldId AS [ContentTimeField.CONTENT_TIME_FIELD_ID], 
            T.ContentId AS [ContentTimeField.CONTENT_ID], 
            T.FieldCode AS [ContentTimeField.FIELD_CODE], 
            T.FieldValue AS [ContentTimeField.FIELD_VALUE], 
            True AS _from0
        FROM DbEntity.ContentTimeFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Model.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Model
        [CodeFirstDatabaseSchema.Model](T1.[Model.MODEL_ID], T1.Model_NAME, T1.Model_CODE, T1.Model_STATUS, T1.Model_DESCRIPTION)
    FROM (
        SELECT 
            T.ModelId AS [Model.MODEL_ID], 
            T.Name AS Model_NAME, 
            T.Code AS Model_CODE, 
            T.Status AS Model_STATUS, 
            T.Description AS Model_DESCRIPTION, 
            True AS _from0
        FROM DbEntity.Models AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ModelField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelField
        [CodeFirstDatabaseSchema.ModelField](T1.[ModelField.MODEL_FIELD_ID], T1.ModelField_NAME, T1.ModelField_CODE, T1.[ModelField.CONTROL_TYPE], T1.[ModelField.DEFAULT_VALUE], T1.[ModelField.VALID_TIP_MSG], T1.[ModelField.VALID_PATTERN], T1.[ModelField.VALID_ERROR_MSG], T1.[ModelField.IS_SYSTEM_FIELD], T1.[ModelField.ITEM_OPTION], T1.[ModelField.HTML_TEMPLATE], T1.[ModelField.FIELD_TYPE], T1.ModelField_STATUS)
    FROM (
        SELECT 
            T.ModelFieldId AS [ModelField.MODEL_FIELD_ID], 
            T.Name AS ModelField_NAME, 
            T.Code AS ModelField_CODE, 
            T.ControlType AS [ModelField.CONTROL_TYPE], 
            T.DefaultValue AS [ModelField.DEFAULT_VALUE], 
            T.ValidTipMsg AS [ModelField.VALID_TIP_MSG], 
            T.ValidPattern AS [ModelField.VALID_PATTERN], 
            T.ValidErrorMsg AS [ModelField.VALID_ERROR_MSG], 
            T.IsSystemField AS [ModelField.IS_SYSTEM_FIELD], 
            T.ItemOption AS [ModelField.ITEM_OPTION], 
            T.HtmlTemplate AS [ModelField.HTML_TEMPLATE], 
            T.FieldType AS [ModelField.FIELD_TYPE], 
            T.Status AS ModelField_STATUS, 
            True AS _from0
        FROM DbEntity.ModelFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ModelModelField.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelModelField
        [CodeFirstDatabaseSchema.ModelModelField](T1.[ModelModelField.MODEL_ID], T1.[ModelModelField.MODEL_FIELD_ID])
    FROM (
        SELECT 
            Key(T.Model_ModelFields_Source).ModelId AS [ModelModelField.MODEL_ID], 
            Key(T.Model_ModelFields_Target).ModelFieldId AS [ModelModelField.MODEL_FIELD_ID], 
            True AS _from0
        FROM DbEntity.Model_ModelFields AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Categories
        [WorkData.EF.Domain.Category](T1.Category_CategoryId, T1.Category_ParentId, T1.Category_ModelId, T1.Category_Name, T1.Category_Code, T1.Category_Status, T1.Category_Layer, T1.Category_HasLevel, T1.Category_Sort, T1.Category_FormTemplate, T1.Category_FormJson, T1.Category_ListJson, T1.Category_ListHead, T1.Category_ListTempalte)
    FROM (
        SELECT 
            T.CATEGORY_ID AS Category_CategoryId, 
            T.PARENT_ID AS Category_ParentId, 
            T.MODEL_ID AS Category_ModelId, 
            T.NAME AS Category_Name, 
            T.CODE AS Category_Code, 
            T.STATUS AS Category_Status, 
            T.LAYER AS Category_Layer, 
            T.HAS_LEVEL AS Category_HasLevel, 
            T.SORT AS Category_Sort, 
            T.FORM_TEMPLATE AS Category_FormTemplate, 
            T.FORM_JSON AS Category_FormJson, 
            T.LIST_JSON AS Category_ListJson, 
            T.LIST_HEAD AS Category_ListHead, 
            T.LIST_TEMPLATE AS Category_ListTempalte, 
            True AS _from0
        FROM CodeFirstDatabase.Category AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Contents.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Contents
        [WorkData.EF.Domain.Content](T1.Content_ContentId, T1.Content_ModelId, T1.Content_CategoryId)
    FROM (
        SELECT 
            T.CONTENT_ID AS Content_ContentId, 
            T.MODEL_ID AS Content_ModelId, 
            T.CATEGORY_ID AS Content_CategoryId, 
            True AS _from0
        FROM CodeFirstDatabase.Content AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.ContentDescriptionFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentDescriptionFields
        [WorkData.EF.Domain.ContentDescriptionField](T1.ContentDescriptionField_ContentDescriptionFieldId, T1.ContentDescriptionField_ContentId, T1.ContentDescriptionField_FieldCode, T1.ContentDescriptionField_FieldValue)
    FROM (
        SELECT 
            T.CONTENT_DESCRIPTION_FIELD_ID AS ContentDescriptionField_ContentDescriptionFieldId, 
            T.CONTENT_ID AS ContentDescriptionField_ContentId, 
            T.FIELD_CODE AS ContentDescriptionField_FieldCode, 
            T.FIELD_VALUE AS ContentDescriptionField_FieldValue, 
            True AS _from0
        FROM CodeFirstDatabase.ContentDescriptionField AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.ContentDoubleFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentDoubleFields
        [WorkData.EF.Domain.ContentDoubleField](T1.ContentDoubleField_ContentDoubleFieldId, T1.ContentDoubleField_ContentId, T1.ContentDoubleField_FieldCode, T1.ContentDoubleField_FieldValue)
    FROM (
        SELECT 
            T.CONTENT_DOUBLE_FIELD_ID AS ContentDoubleField_ContentDoubleFieldId, 
            T.CONTENT_ID AS ContentDoubleField_ContentId, 
            T.FIELD_CODE AS ContentDoubleField_FieldCode, 
            T.FIELD_VALUE AS ContentDoubleField_FieldValue, 
            True AS _from0
        FROM CodeFirstDatabase.ContentDoubleField AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.ContentIntFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentIntFields
        [WorkData.EF.Domain.ContentIntField](T1.ContentIntField_ContentIntFieldId, T1.ContentIntField_ContentId, T1.ContentIntField_FieldCode, T1.ContentIntField_FieldValue)
    FROM (
        SELECT 
            T.CONTENT_INT_FIELD_ID AS ContentIntField_ContentIntFieldId, 
            T.CONTENT_ID AS ContentIntField_ContentId, 
            T.FIELD_CODE AS ContentIntField_FieldCode, 
            T.FIELD_VALUE AS ContentIntField_FieldValue, 
            True AS _from0
        FROM CodeFirstDatabase.ContentIntField AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.ContentStringFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentStringFields
        [WorkData.EF.Domain.ContentStringField](T1.ContentStringField_ContentStringFieldId, T1.ContentStringField_ContentId, T1.ContentStringField_FieldCode, T1.ContentStringField_FieldValue)
    FROM (
        SELECT 
            T.CONTENT_STRING_FIELD_ID AS ContentStringField_ContentStringFieldId, 
            T.CONTENT_ID AS ContentStringField_ContentId, 
            T.FIELD_CODE AS ContentStringField_FieldCode, 
            T.FIELD_VALUE AS ContentStringField_FieldValue, 
            True AS _from0
        FROM CodeFirstDatabase.ContentStringField AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.ContentTextFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentTextFields
        [WorkData.EF.Domain.ContentTextField](T1.ContentTextField_ContentTextFieldId, T1.ContentTextField_ContentId, T1.ContentTextField_FieldCode, T1.ContentTextField_FieldValue)
    FROM (
        SELECT 
            T.CONTENT_TEXT_FIELD_ID AS ContentTextField_ContentTextFieldId, 
            T.CONTENT_ID AS ContentTextField_ContentId, 
            T.FIELD_CODE AS ContentTextField_FieldCode, 
            T.FIELD_VALUE AS ContentTextField_FieldValue, 
            True AS _from0
        FROM CodeFirstDatabase.ContentTextField AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.ContentTimeFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ContentTimeFields
        [WorkData.EF.Domain.ContentTimeField](T1.ContentTimeField_ContentTimeFieldId, T1.ContentTimeField_ContentId, T1.ContentTimeField_FieldCode, T1.ContentTimeField_FieldValue)
    FROM (
        SELECT 
            T.CONTENT_TIME_FIELD_ID AS ContentTimeField_ContentTimeFieldId, 
            T.CONTENT_ID AS ContentTimeField_ContentId, 
            T.FIELD_CODE AS ContentTimeField_FieldCode, 
            T.FIELD_VALUE AS ContentTimeField_FieldValue, 
            True AS _from0
        FROM CodeFirstDatabase.ContentTimeField AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Models.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Models
        [WorkData.EF.Domain.Model](T1.Model_ModelId, T1.Model_Name, T1.Model_Code, T1.Model_Status, T1.Model_Description)
    FROM (
        SELECT 
            T.MODEL_ID AS Model_ModelId, 
            T.NAME AS Model_Name, 
            T.CODE AS Model_Code, 
            T.STATUS AS Model_Status, 
            T.DESCRIPTION AS Model_Description, 
            True AS _from0
        FROM CodeFirstDatabase.Model AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.ModelFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ModelFields
        [WorkData.EF.Domain.ModelField](T1.ModelField_ModelFieldId, T1.ModelField_Name, T1.ModelField_Code, T1.ModelField_ControlType, T1.ModelField_DefaultValue, T1.ModelField_ValidTipMsg, T1.ModelField_ValidPattern, T1.ModelField_ValidErrorMsg, T1.ModelField_IsSystemField, T1.ModelField_ItemOption, T1.ModelField_HtmlTemplate, T1.ModelField_FieldType, T1.ModelField_Status)
    FROM (
        SELECT 
            T.MODEL_FIELD_ID AS ModelField_ModelFieldId, 
            T.NAME AS ModelField_Name, 
            T.CODE AS ModelField_Code, 
            T.CONTROL_TYPE AS ModelField_ControlType, 
            T.DEFAULT_VALUE AS ModelField_DefaultValue, 
            T.VALID_TIP_MSG AS ModelField_ValidTipMsg, 
            T.VALID_PATTERN AS ModelField_ValidPattern, 
            T.VALID_ERROR_MSG AS ModelField_ValidErrorMsg, 
            T.IS_SYSTEM_FIELD AS ModelField_IsSystemField, 
            T.ITEM_OPTION AS ModelField_ItemOption, 
            T.HTML_TEMPLATE AS ModelField_HtmlTemplate, 
            T.FIELD_TYPE AS ModelField_FieldType, 
            T.STATUS AS ModelField_Status, 
            True AS _from0
        FROM CodeFirstDatabase.ModelField AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DbEntity.Model_ModelFields.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Model_ModelFields
        [WorkData.EF.Domain.Model_ModelFields](T3.[Model_ModelFields.Model_ModelFields_Source], T3.[Model_ModelFields.Model_ModelFields_Target])
    FROM (
        SELECT -- Constructing Model_ModelFields_Source
            CreateRef(DbEntity.Models, row(T2.[Model_ModelFields.Model_ModelFields_Source.ModelId]), [WorkData.EF.Domain.Model]) AS [Model_ModelFields.Model_ModelFields_Source], 
            T2.[Model_ModelFields.Model_ModelFields_Target]
        FROM (
            SELECT -- Constructing Model_ModelFields_Target
                T1.[Model_ModelFields.Model_ModelFields_Source.ModelId], 
                CreateRef(DbEntity.ModelFields, row(T1.[Model_ModelFields.Model_ModelFields_Target.ModelFieldId]), [WorkData.EF.Domain.ModelField]) AS [Model_ModelFields.Model_ModelFields_Target]
            FROM (
                SELECT 
                    T.MODEL_ID AS [Model_ModelFields.Model_ModelFields_Source.ModelId], 
                    T.MODEL_FIELD_ID AS [Model_ModelFields.Model_ModelFields_Target.ModelFieldId], 
                    True AS _from0
                FROM CodeFirstDatabase.ModelModelField AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
